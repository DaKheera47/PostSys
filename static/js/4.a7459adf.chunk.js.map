{"version":3,"sources":["components/displayComponents/DisplayArrows.js","components/table/TableHeader.js","components/table/TableInput.js","components/table/TableRow.js","components/table/MainTable.js","components/ReceiptBar.js","pages/workspace.js"],"names":["ArrowUp","svg","width","height","viewBox","fill","xmlns","whileHover","scale","whileTap","d","ArrowDown","TableHeader","requestSort","sortConfig","className","recognizer","cssClassName","display","map","column","td","onClick","key","direction","TableInput","currentItems","allItems","setCurrentItems","useState","itemIdForm","setItemIdForm","itemUnitsForm","setItemUnitsForm","handleChange","e","target","id","value","handleKeyDown","count","item","itemID","Number","forEach","p","qty","itemName","unitPrice","totalPrice","tempCurrentItems","parseFloat","toFixed","type","onChange","onKeyDown","min","max","TableRow","listVariant","visible","opacity","hidden","exit","x","itemVariant","tr","initial","animate","variants","layout","MainTable","sortDirection","items","onTotalChange","itemsFromWorkspace","totalCost","setTotalCost","setSortConfig","useEffect","num","useMemo","sort","a","b","table","filename","Date","now","sheet","buttonText","ReceiptBar","total","grandTotal","change","setChange","payment","setPayment","pre","text","springConfig","mass","tension","friction","name","placeholder","n","isNaN","isFinite","span","translateY","transition","duration","presets","wobbly","Math","abs","Workspace","useContext","ItemContext","setItems","setTotal","setGrandTotal","document","title","workspaceNav","Nav","mode","left","center","url","cont","onClickClear","right","img","div","t","round"],"mappings":"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","file":"static/js/4.a7459adf.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport const ArrowUp = (\r\n    <motion.svg\r\n        width=\"15\"\r\n        height=\"10\"\r\n        viewBox=\"0 0 15 10\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        whileHover={{ scale: 1.1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n    >\r\n        <path\r\n            d=\"M0.239728 9.16423L0.731073 9.72266C0.885708 9.89706 1.09144 9.99313 1.31132 9.99313C1.53108 9.99313 1.73706 9.89706 1.89169 9.72266L7.49662 3.39616L13.108 9.72968C13.2624 9.90408 13.4684 10 13.6881 10C13.9079 10 14.114 9.90408 14.2685 9.72968L14.76 9.17469C15.08 8.81378 15.08 8.22589 14.76 7.86498L8.07894 0.297057C7.92455 0.122797 7.71881 1.54965e-05 7.4971 1.54965e-05H7.49454C7.27466 1.54965e-05 7.06893 0.122934 6.91454 0.297057L0.239728 7.84448C0.0850922 8.01874 0.00021303 8.25796 -3.0874e-05 8.506C-3.0874e-05 8.75418 0.0850922 8.9901 0.239728 9.16423Z\"\r\n            fill=\"black\"\r\n        />\r\n    </motion.svg>\r\n);\r\n\r\nexport const ArrowDown = (\r\n    <motion.svg\r\n        whileHover={{ scale: 1.1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n        width=\"15\"\r\n        height=\"10\"\r\n        viewBox=\"0 0 15 10\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n        <path\r\n            d=\"M14.7602 0.835788L14.2689 0.277357C14.1143 0.10296 13.9085 0.00688247 13.6886 0.00688247C13.4689 0.00688247 13.2629 0.10296 13.1083 0.277357L7.50335 6.60385L1.89197 0.270337C1.73758 0.0959395 1.5316 0 1.31184 0C1.09208 0 0.885983 0.0959395 0.731469 0.270337L0.240002 0.825327C-0.0800007 1.18624 -0.0800007 1.77412 0.240002 2.13503L6.92103 9.70296C7.07542 9.87722 7.28116 10 7.50287 10H7.50543C7.72531 10 7.93104 9.87708 8.08543 9.70296L14.7602 2.15554C14.9149 1.98128 14.9998 1.74205 15 1.49401C15 1.24584 14.9149 1.00991 14.7602 0.835788Z\"\r\n            fill=\"black\"\r\n        />\r\n    </motion.svg>\r\n);\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport { ArrowDown, ArrowUp } from \"../displayComponents/DisplayArrows\";\r\n\r\nfunction TableHeader({ requestSort, sortConfig }) {\r\n    const allColumns = [\r\n        {\r\n            recognizer: \"itemID\",\r\n            cssClassName: \"th-id heading\",\r\n            display: \"Item ID\",\r\n        },\r\n        {\r\n            recognizer: \"itemName\",\r\n            cssClassName: \"th-name heading\",\r\n            display: \"Item Name/Description\",\r\n        },\r\n        {\r\n            recognizer: \"qty\",\r\n            cssClassName: \"th-qty heading\",\r\n            display: \"Units\",\r\n        },\r\n        {\r\n            recognizer: \"unitPrice\",\r\n            cssClassName: \"th-unitPrice heading\",\r\n            display: \"Unit Price\",\r\n        },\r\n        {\r\n            recognizer: \"totalPrice\",\r\n            cssClassName: \"th-totalPrice heading\",\r\n            display: \"Total Price\",\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <tr className=\"noselect header\">\r\n            {allColumns.map((column) => (\r\n                // mapping through all columns to make cleaner code\r\n                <motion.td\r\n                    onClick={() => requestSort(column.recognizer)}\r\n                    className={column.cssClassName}\r\n                    whileHover={{ scale: 1.025 }}\r\n                    whileTap={{ scale: 0.975 }}\r\n                    key={column.recognizer}\r\n                >\r\n                    <span>{column.display}</span>\r\n                    {/* logic for arrow direction and sorting */}\r\n                    {sortConfig.direction === \"ascending\" && sortConfig.key === column.recognizer\r\n                        ? ArrowDown\r\n                        : sortConfig.key === column.recognizer &&\r\n                          sortConfig.direction === \"descending\"\r\n                        ? ArrowUp\r\n                        : null}\r\n                </motion.td>\r\n            ))}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableHeader;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TableInput({ currentItems, allItems, setCurrentItems }) {\r\n    const [itemIdForm, setItemIdForm] = useState(\"\");\r\n    const [itemUnitsForm, setItemUnitsForm] = useState(1);\r\n    // logic for form handling\r\n    const handleChange = (e) => {\r\n        switch (e.target.id) {\r\n            case \"IdInput\":\r\n                setItemIdForm(e.target.value);\r\n                break;\r\n\r\n            case \"UnitsInput\":\r\n                setItemUnitsForm(e.target.value);\r\n                break;\r\n        }\r\n    };\r\n\r\n    // logic on input\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            if (itemIdForm !== \"\" && itemUnitsForm !== \"\") {\r\n                let count = 1;\r\n\r\n                // counting occurances of new item\r\n                currentItems.map((item) => (item.itemID === Number(itemIdForm) ? count++ : null));\r\n\r\n                if (count <= 1) {\r\n                    // changing current display items\r\n                    allItems.forEach((item) => {\r\n                        if (item.itemID === Number(itemIdForm)) {\r\n                            // adding new item\r\n                            setCurrentItems((p) => [\r\n                                {\r\n                                    itemID: Number(itemIdForm),\r\n                                    qty: Number(itemUnitsForm),\r\n                                    itemName: item.itemName,\r\n                                    unitPrice: item.unitPrice,\r\n                                    totalPrice: item.unitPrice * Number(itemUnitsForm),\r\n                                },\r\n                                ...p,\r\n                            ]);\r\n\r\n                            // resetting value back to empty after changes\r\n                            setItemIdForm(\"\");\r\n                            setItemUnitsForm(1);\r\n                        }\r\n                    });\r\n                } else {\r\n                    // checking if item code already exists. if it does, add the quantity to the previous value\r\n                    // duping current items to change\r\n                    let tempCurrentItems = [...currentItems];\r\n\r\n                    tempCurrentItems.forEach((item) => {\r\n                        if (item.itemID === Number(itemIdForm)) {\r\n                            item.qty = item.qty + Number(itemUnitsForm);\r\n                            item.totalPrice = parseFloat(\r\n                                (item.unitPrice * Number(item.qty)).toFixed(2)\r\n                            );\r\n                            // resetting value back to empty after changes\r\n                            setItemIdForm(\"\");\r\n                            setItemUnitsForm(1);\r\n                        }\r\n                    });\r\n\r\n                    // setting current items to the newly changed current items\r\n                    // which also updates table rows and receipt bar\r\n                    setCurrentItems(tempCurrentItems);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            <td className=\"td-id\">\r\n                {/* item id input field */}\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"IdInput\"\r\n                    className=\"idInput\"\r\n                    onChange={handleChange}\r\n                    onKeyDown={handleKeyDown}\r\n                    value={itemIdForm}\r\n                />\r\n            </td>\r\n            {/* placehholder to keep space */}\r\n            <td className=\"td-name\"></td>\r\n            <td className=\"td-qty\">\r\n                {/* item units input field */}\r\n                <input\r\n                    type=\"number\"\r\n                    id=\"UnitsInput\"\r\n                    className=\"unitInput\"\r\n                    min=\"1\"\r\n                    max=\"100000\"\r\n                    onChange={handleChange}\r\n                    onKeyDown={handleKeyDown}\r\n                    value={itemUnitsForm}\r\n                />\r\n            </td>\r\n            {/* placecholders to keep space */}\r\n            <td className=\"td-price\"></td>\r\n            <td className=\"td-price\"></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableInput;\r\n","import React from \"react\";\r\nimport { motion, AnimateSharedLayout, AnimatePresence } from \"framer-motion\";\r\n\r\nfunction TableRow({ currentItems }) {\r\n    const listVariant = {\r\n        visible: { opacity: 1 },\r\n        hidden: { opacity: 0 },\r\n        exit: { opacity: 0, x: 0 },\r\n    };\r\n\r\n    const itemVariant = {\r\n        visible: { opacity: 1, x: 0 },\r\n        hidden: { opacity: 0, x: -100 },\r\n        exit: { opacity: 0, x: 0 },\r\n    };\r\n\r\n    return (\r\n        <AnimatePresence>\r\n            <AnimateSharedLayout>\r\n                {currentItems.map((item) => (\r\n                    <motion.tr\r\n                        initial=\"hidden\"\r\n                        animate=\"visible\"\r\n                        exit=\"exit\"\r\n                        variants={listVariant}\r\n                        key={item.itemID}\r\n                        layout\r\n                    >\r\n                        <motion.td className=\"td-id\" variants={itemVariant} exit=\"exit\">\r\n                            {item.itemID}\r\n                        </motion.td>\r\n                        <motion.td className=\"td-name\" variants={itemVariant} exit=\"exit\">\r\n                            {item.itemName}\r\n                        </motion.td>\r\n                        <motion.td className=\"td-qty\" variants={itemVariant} exit=\"exit\">\r\n                            {item.qty}\r\n                        </motion.td>\r\n                        <motion.td className=\"td-price\" variants={itemVariant} exit=\"exit\">\r\n                            Rs. {item.unitPrice}\r\n                        </motion.td>\r\n                        <motion.td className=\"td-price\" variants={itemVariant} exit=\"exit\">\r\n                            Rs. {item.totalPrice}\r\n                        </motion.td>\r\n                    </motion.tr>\r\n                ))}\r\n            </AnimateSharedLayout>\r\n        </AnimatePresence>\r\n    );\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\r\nimport \"../../stylesheets/maintable.css\";\r\n\r\nimport TableHeader from \"./TableHeader\";\r\nimport TableInput from \"./TableInput\";\r\nimport TableRowGen from \"./TableRow\";\r\n\r\nfunction MainTable({ items: allItems, onTotalChange, currentItems: itemsFromWorkspace }) {\r\n    const [totalCost, setTotalCost] = useState(0);\r\n    const [sortConfig, setSortConfig] = useState([...allItems]);\r\n    const [currentItems, setCurrentItems] = useState(itemsFromWorkspace);\r\n\r\n    // send value of totalCost to the workspace component for rendering in the receipt bar\r\n    useEffect(() => {\r\n        onTotalChange(totalCost);\r\n    }, [totalCost, onTotalChange]);\r\n\r\n    // adding total value to variable as soon as currentItems changes\r\n    useEffect(() => {\r\n        let num = 0;\r\n\r\n        currentItems.forEach((item) => {\r\n            item.totalPrice ? (num += item.totalPrice) : (num += 0);\r\n        });\r\n\r\n        setTotalCost(num);\r\n    }, [currentItems]);\r\n\r\n    // update value of current items when the current items by the workspace change\r\n    useEffect(() => {\r\n        setCurrentItems(itemsFromWorkspace);\r\n    }, [itemsFromWorkspace]);\r\n\r\n    let sortDirection;\r\n\r\n    const requestSort = (key) => {\r\n        sortDirection = \"ascending\";\r\n\r\n        if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\r\n            sortDirection = \"descending\";\r\n        }\r\n\r\n        setSortConfig({ key, direction: sortDirection });\r\n    };\r\n\r\n    useMemo(() => {\r\n        currentItems.sort((a, b) => {\r\n            if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                return sortConfig.direction === \"ascending\" ? -1 : 1;\r\n            }\r\n            if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                return sortConfig.direction === \"ascending\" ? 1 : -1;\r\n            }\r\n            return 0;\r\n        });\r\n        return currentItems;\r\n    }, [sortConfig, currentItems]);\r\n\r\n    return (\r\n        <>\r\n            <ReactHTMLTableToExcel\r\n                id=\"test-table-xls-button\"\r\n                className=\"download-table-xls-button\"\r\n                table=\"table-to-xls\"\r\n                filename={\"Table By PostSys\" + Date.now()}\r\n                sheet=\"tablexls\"\r\n                buttonText=\"Download as XLS\"\r\n            />\r\n            <table className=\"MainTable\" id=\"table-to-xls\">\r\n                <thead>\r\n                    <TableHeader requestSort={requestSort} sortConfig={sortConfig} />\r\n                </thead>\r\n                <tbody>\r\n                    <TableInput\r\n                        currentItems={currentItems}\r\n                        allItems={allItems}\r\n                        setCurrentItems={setCurrentItems}\r\n                    />\r\n\r\n                    <TableRowGen currentItems={currentItems} />\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainTable;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport \"../stylesheets/receiptbar.css\";\r\nimport TextTransition, { presets } from \"react-text-transition\";\r\n\r\nfunction ReceiptBar({ total, grandTotal }) {\r\n    const [change, setChange] = useState();\r\n    const [payment, setPayment] = useState(\"\");\r\n    let pre = \"\";\r\n\r\n    function isNumeric(n) {\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n    }\r\n\r\n    const handlePaymentInput = (e) => {\r\n        if (isNumeric(+e.target.value)) {\r\n            setPayment(e.target.value);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setChange(parseFloat((Number(payment) - Number(grandTotal)).toFixed(2)));\r\n    }, [payment, grandTotal]);\r\n\r\n    return (\r\n        <div className=\"rb-container\">\r\n            <div className=\"rb-receipt-number-container\">\r\n                <p>Receipt No. 5432</p>\r\n            </div>\r\n\r\n            <h1 className=\"rb-cost-text\">\r\n                <TextTransition\r\n                    text={`Rs. ${grandTotal}`}\r\n                    springConfig={{ mass: 1, tension: 120, friction: 14 }}\r\n                    className=\"rb-text\"\r\n                />\r\n            </h1>\r\n\r\n            <div className=\"rb-gst-container\">\r\n                <p>Gross Total - Rs. {total}</p>\r\n                <p>GST - {grandTotal >= 1000 ? \"5%\" : \"0%\"}</p>\r\n                <p>Discount - 0%</p>\r\n            </div>\r\n\r\n            <div className=\"rb-payment-change-container\">\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"payment\"\r\n                    id=\"payment\"\r\n                    placeholder=\"Add Payment\"\r\n                    className=\"rb-payment-input\"\r\n                    onChange={handlePaymentInput}\r\n                    value={payment}\r\n                />\r\n                <AnimatePresence>\r\n                    {change >= 0 ? (pre = \"Change - Rs.\") : (pre = \"Add Rs.\")}\r\n                    {change >= 0 ? (\r\n                        <motion.span\r\n                            initial={{ translateY: 25, opacity: 0 }}\r\n                            animate={{ translateY: 0, opacity: 1 }}\r\n                            exit={{ translateY: 25, opacity: 0 }}\r\n                            transition={{ duration: 0.25 }}\r\n                            className=\"rb-change-text\"\r\n                        >\r\n                            <TextTransition\r\n                                text={`${pre} ${change}`}\r\n                                springConfig={presets.wobbly}\r\n                            />\r\n                        </motion.span>\r\n                    ) : (\r\n                        <motion.span\r\n                            initial={{ translateY: 25, opacity: 0 }}\r\n                            animate={{ translateY: 0, opacity: 1 }}\r\n                            transition={{ duration: 0.25 }}\r\n                            exit={{ translateY: 25, opacity: 0 }}\r\n                            className=\"rb-change-text\"\r\n                        >\r\n                            <TextTransition\r\n                                text={`${pre} ${Math.abs(change)}`}\r\n                                springConfig={presets.wobbly}\r\n                            />\r\n                        </motion.span>\r\n                    )}\r\n                </AnimatePresence>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReceiptBar;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport MainTable from \"../components/table/MainTable\";\r\nimport ReceiptBar from \"../components/ReceiptBar\";\r\nimport { motion } from \"framer-motion\";\r\nimport { ItemContext } from \"../contexts/ItemsContext\";\r\nimport Nav from \"../components/Nav\";\r\n\r\nfunction Workspace() {\r\n    const [items, setItems] = useContext(ItemContext);\r\n\r\n    const [total, setTotal] = useState(0);\r\n    const [grandTotal, setGrandTotal] = useState(0);\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        document.title = \"Workspace | Postsys\";\r\n    }, []);\r\n\r\n    const onClickClear = () => {\r\n        setCurrentItems([]);\r\n        setGrandTotal(0);\r\n        setTotal(0);\r\n    };\r\n\r\n    const workspaceNav = (\r\n        <Nav\r\n            mode=\"link\"\r\n            left={[\"PostSys\"]}\r\n            center={[\r\n                {\r\n                    type: \"link\",\r\n                    name: \"Projects\",\r\n                    url: \"/\",\r\n                    cont: \"\",\r\n                },\r\n                {\r\n                    type: \"link\",\r\n                    name: \"Edit\",\r\n                    url: \"/\",\r\n                    cont: \"\",\r\n                },\r\n                {\r\n                    type: \"link\",\r\n                    name: \"Clear\",\r\n                    url: \"/\",\r\n                    cont: \"\",\r\n                },\r\n            ]}\r\n            onClickClear={onClickClear}\r\n            right={[\"\"]}\r\n            img={[\"\"]}\r\n        />\r\n    );\r\n\r\n    const onTotalChange = (t) => {\r\n        // only round to the nearest digit if total over 100\r\n        if (t >= 100) {\r\n            setTotal(Math.round(t));\r\n        } else {\r\n            setTotal(parseFloat(t.toFixed(2)));\r\n        }\r\n\r\n        // applying gst only when total cost above 5000\r\n        if (total >= 1000) {\r\n            setGrandTotal(parseFloat((total * 1.05).toFixed(2)));\r\n        } else {\r\n            setGrandTotal(total);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {workspaceNav}\r\n            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\r\n                <MainTable\r\n                    items={items}\r\n                    setItems={setItems}\r\n                    onTotalChange={onTotalChange}\r\n                    currentItems={currentItems}\r\n                />\r\n                <ReceiptBar total={total} grandTotal={grandTotal} />\r\n            </motion.div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Workspace;\r\n"],"sourceRoot":""}