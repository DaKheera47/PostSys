{"version":3,"sources":["components/displayComponents/DisplayArrows.js","components/table/TableHeader.js","components/table/TableInput.js","components/table/TableRow.js","components/table/MainTable.js","components/ReceiptBar.js","components/nav/WorkspaceNav.js","pages/workspace.js"],"names":["ArrowUp","svg","width","height","viewBox","fill","xmlns","whileHover","scale","whileTap","d","ArrowDown","TableHeader","requestSort","sortConfig","className","recognizer","cssClassName","display","map","column","td","onClick","key","direction","TableInput","currentItems","allItems","setCurrentItems","handleRemoveUnit","handleAddUnit","useState","itemIdForm","setItemIdForm","itemUnitsForm","setItemUnitsForm","handleChange","e","target","id","value","handleKeyDown","count","item","itemID","Number","forEach","p","qty","itemName","unitPrice","totalPrice","tempCurrentItems","parseFloat","toFixed","type","onChange","onKeyDown","min","max","TableRow","itemVariant","visible","opacity","x","hidden","tr","initial","animate","layout","variants","MainTable","sortDirection","items","onTotalChange","totalCost","setTotalCost","setSortConfig","console","log","useEffect","num","useMemo","sort","a","b","ReceiptBar","total","grandTotal","currentItemsLength","onClickCancel","change","setChange","payment","setPayment","pre","text","noOverflow","springConfig","mass","tension","friction","name","placeholder","n","isNaN","isFinite","span","translateY","exit","transition","duration","presets","wobbly","Math","abs","button","disabled","table","filename","Date","toLocaleDateString","sheet","buttonText","WorkspaceNav","useAuth0","loginWithRedirect","logout","isAuthenticated","user","logoutURL","div","to","returnTo","src","picture","alt","Workspace","useContext","ItemContext","setItems","setTotal","setGrandTotal","document","title","t","round","length"],"mappings":"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","file":"static/js/4.f155bf3f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport const ArrowUp = (\r\n    <motion.svg\r\n        width=\"15\"\r\n        height=\"10\"\r\n        viewBox=\"0 0 15 10\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        whileHover={{ scale: 1.1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n    >\r\n        <path\r\n            d=\"M0.239728 9.16423L0.731073 9.72266C0.885708 9.89706 1.09144 9.99313 1.31132 9.99313C1.53108 9.99313 1.73706 9.89706 1.89169 9.72266L7.49662 3.39616L13.108 9.72968C13.2624 9.90408 13.4684 10 13.6881 10C13.9079 10 14.114 9.90408 14.2685 9.72968L14.76 9.17469C15.08 8.81378 15.08 8.22589 14.76 7.86498L8.07894 0.297057C7.92455 0.122797 7.71881 1.54965e-05 7.4971 1.54965e-05H7.49454C7.27466 1.54965e-05 7.06893 0.122934 6.91454 0.297057L0.239728 7.84448C0.0850922 8.01874 0.00021303 8.25796 -3.0874e-05 8.506C-3.0874e-05 8.75418 0.0850922 8.9901 0.239728 9.16423Z\"\r\n            fill=\"black\"\r\n        />\r\n    </motion.svg>\r\n);\r\n\r\nexport const ArrowDown = (\r\n    <motion.svg\r\n        whileHover={{ scale: 1.1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n        width=\"15\"\r\n        height=\"10\"\r\n        viewBox=\"0 0 15 10\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n        <path\r\n            d=\"M14.7602 0.835788L14.2689 0.277357C14.1143 0.10296 13.9085 0.00688247 13.6886 0.00688247C13.4689 0.00688247 13.2629 0.10296 13.1083 0.277357L7.50335 6.60385L1.89197 0.270337C1.73758 0.0959395 1.5316 0 1.31184 0C1.09208 0 0.885983 0.0959395 0.731469 0.270337L0.240002 0.825327C-0.0800007 1.18624 -0.0800007 1.77412 0.240002 2.13503L6.92103 9.70296C7.07542 9.87722 7.28116 10 7.50287 10H7.50543C7.72531 10 7.93104 9.87708 8.08543 9.70296L14.7602 2.15554C14.9149 1.98128 14.9998 1.74205 15 1.49401C15 1.24584 14.9149 1.00991 14.7602 0.835788Z\"\r\n            fill=\"black\"\r\n        />\r\n    </motion.svg>\r\n);\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport { ArrowDown, ArrowUp } from \"../displayComponents/DisplayArrows\";\r\n\r\nfunction TableHeader({ requestSort, sortConfig }) {\r\n    const allColumns = [\r\n        {\r\n            recognizer: \"itemID\",\r\n            cssClassName: \"th-id heading\",\r\n            display: \"Item ID\",\r\n        },\r\n        {\r\n            recognizer: \"itemName\",\r\n            cssClassName: \"th-name heading\",\r\n            display: \"Item Name/Description\",\r\n        },\r\n        {\r\n            recognizer: \"qty\",\r\n            cssClassName: \"th-qty heading\",\r\n            display: \"Units\",\r\n        },\r\n        {\r\n            recognizer: \"unitPrice\",\r\n            cssClassName: \"th-unitPrice heading\",\r\n            display: \"Unit Price\",\r\n        },\r\n        {\r\n            recognizer: \"totalPrice\",\r\n            cssClassName: \"th-totalPrice heading\",\r\n            display: \"Total Price\",\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <tr className=\"noselect header\">\r\n            {allColumns.map((column) => (\r\n                // mapping through all columns to make cleaner code\r\n                <motion.td\r\n                    onClick={() => requestSort(column.recognizer)}\r\n                    className={column.cssClassName}\r\n                    whileHover={{ scale: 1.025 }}\r\n                    whileTap={{ scale: 0.975 }}\r\n                    key={column.recognizer}\r\n                >\r\n                    <span>{column.display}</span>\r\n                    {/* logic for arrow direction and sorting */}\r\n                    {sortConfig.direction === \"ascending\" && sortConfig.key === column.recognizer\r\n                        ? ArrowDown\r\n                        : sortConfig.key === column.recognizer &&\r\n                          sortConfig.direction === \"descending\"\r\n                        ? ArrowUp\r\n                        : null}\r\n                </motion.td>\r\n            ))}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableHeader;\r\n","import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction TableInput({ currentItems, allItems, setCurrentItems, handleRemoveUnit, handleAddUnit }) {\r\n    const [itemIdForm, setItemIdForm] = useState(\"\");\r\n    const [itemUnitsForm, setItemUnitsForm] = useState(1);\r\n    // logic for form handling\r\n    const handleChange = (e) => {\r\n        switch (e.target.id) {\r\n            case \"IdInput\":\r\n                setItemIdForm(e.target.value);\r\n                break;\r\n\r\n            case \"UnitsInput\":\r\n                setItemUnitsForm(e.target.value);\r\n                break;\r\n        }\r\n    };\r\n\r\n    // logic on input\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            if (itemIdForm !== \"\" && itemUnitsForm !== \"\") {\r\n                let count = 1;\r\n\r\n                // counting occurances of new item\r\n                currentItems.map((item) => (item.itemID === Number(itemIdForm) ? count++ : null));\r\n\r\n                if (count <= 1) {\r\n                    // changing current display items\r\n                    allItems.forEach((item) => {\r\n                        if (item.itemID === Number(itemIdForm)) {\r\n                            // adding new item\r\n                            setCurrentItems((p) => [\r\n                                {\r\n                                    itemID: Number(itemIdForm),\r\n                                    qty: Number(itemUnitsForm),\r\n                                    itemName: item.itemName,\r\n                                    unitPrice: item.unitPrice,\r\n                                    totalPrice: item.unitPrice * Number(itemUnitsForm),\r\n                                },\r\n                                ...p,\r\n                            ]);\r\n\r\n                            // resetting value back to empty after changes\r\n                            setItemIdForm(\"\");\r\n                            setItemUnitsForm(1);\r\n                        }\r\n                    });\r\n                } else {\r\n                    // checking if item code already exists. if it does, add the quantity to the previous value\r\n                    // duping current items to change\r\n                    let tempCurrentItems = [...currentItems];\r\n\r\n                    tempCurrentItems.forEach((item) => {\r\n                        if (item.itemID === Number(itemIdForm)) {\r\n                            item.qty = item.qty + Number(itemUnitsForm);\r\n                            item.totalPrice = parseFloat(\r\n                                (item.unitPrice * Number(item.qty)).toFixed(2)\r\n                            );\r\n                            // resetting value back to empty after changes\r\n                            setItemIdForm(\"\");\r\n                            setItemUnitsForm(1);\r\n                        }\r\n                    });\r\n\r\n                    // setting current items to the newly changed current items\r\n                    // which also updates table rows and receipt bar\r\n                    setCurrentItems(tempCurrentItems);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            <td className=\"td-id\">\r\n                {/* item id input field */}\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"IdInput\"\r\n                    className=\"idInput\"\r\n                    onChange={handleChange}\r\n                    onKeyDown={handleKeyDown}\r\n                    value={itemIdForm}\r\n                />\r\n            </td>\r\n            {/* placehholder to keep space */}\r\n            <td className=\"td-name\"></td>\r\n            <td className=\"td-qty\">\r\n                {/* item units input field */}\r\n                <input\r\n                    type=\"number\"\r\n                    id=\"UnitsInput\"\r\n                    className=\"unitInput\"\r\n                    min=\"1\"\r\n                    max=\"100000\"\r\n                    onChange={handleChange}\r\n                    onKeyDown={handleKeyDown}\r\n                    value={itemUnitsForm}\r\n                />\r\n            </td>\r\n            {/* placecholders to keep space */}\r\n            <td className=\"td-price\"></td>\r\n            <td className=\"td-price\"></td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableInput;\r\n","import React from \"react\";\r\nimport { motion, AnimateSharedLayout } from \"framer-motion\";\r\nimport { HiPlus } from \"react-icons/hi\";\r\nimport { FiMinus } from \"react-icons/fi\";\r\n\r\nfunction TableRow({ currentItems, handleRemoveUnit, handleAddUnit }) {\r\n    const itemVariant = {\r\n        visible: { opacity: 1, x: 0 },\r\n        hidden: { opacity: 0 },\r\n    };\r\n\r\n    return (\r\n        <AnimateSharedLayout>\r\n            {currentItems.map((item) => (\r\n                <motion.tr\r\n                    initial={{ opacity: 0 }}\r\n                    animate={{ opacity: 1 }}\r\n                    key={item.itemID}\r\n                    layout\r\n                >\r\n                    <motion.td className=\"td-id\" variants={itemVariant}>\r\n                        {item.itemID}\r\n                    </motion.td>\r\n\r\n                    <motion.td className=\"td-name\" variants={itemVariant}>\r\n                        {item.itemName}\r\n                    </motion.td>\r\n\r\n                    <motion.td className=\"td-qty noselect\" variants={itemVariant}>\r\n                        <FiMinus\r\n                            onClick={() => handleRemoveUnit(item.itemID)}\r\n                            className=\"table-row-qty-arrow\"\r\n                        />\r\n\r\n                        {item.qty}\r\n\r\n                        <HiPlus\r\n                            onClick={() => handleAddUnit(item.itemID)}\r\n                            className=\"table-row-qty-arrow\"\r\n                        />\r\n                    </motion.td>\r\n\r\n                    <motion.td className=\"td-price\" variants={itemVariant}>\r\n                        Rs. {item.unitPrice}\r\n                    </motion.td>\r\n\r\n                    <motion.td className=\"td-price\" variants={itemVariant}>\r\n                        Rs. {item.totalPrice}\r\n                    </motion.td>\r\n                </motion.tr>\r\n            ))}\r\n        </AnimateSharedLayout>\r\n    );\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport \"../../stylesheets/maintable.css\";\r\n\r\nimport TableHeader from \"./TableHeader\";\r\nimport TableInput from \"./TableInput\";\r\nimport TableRowGen from \"./TableRow\";\r\n\r\nfunction MainTable({ items: allItems, onTotalChange, setCurrentItems, currentItems }) {\r\n    const [totalCost, setTotalCost] = useState(0);\r\n    const [sortConfig, setSortConfig] = useState([...allItems]);\r\n    console.log(currentItems);\r\n\r\n    // const [currentItems, setCurrentItems] = useState(itemsFromWorkspace);\r\n\r\n    // send value of totalCost to the workspace component for rendering in the receipt bar\r\n    useEffect(() => {\r\n        onTotalChange(totalCost);\r\n    }, [totalCost, onTotalChange]);\r\n\r\n    // adding total value to variable as soon as currentItems changes\r\n    useEffect(() => {\r\n        let num = 0;\r\n\r\n        currentItems.forEach((item) => {\r\n            item.totalPrice ? (num += item.totalPrice) : (num += 0);\r\n        });\r\n\r\n        setTotalCost(num);\r\n    }, [currentItems]);\r\n\r\n    let sortDirection;\r\n\r\n    const requestSort = (key) => {\r\n        sortDirection = \"ascending\";\r\n\r\n        if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\r\n            sortDirection = \"descending\";\r\n        }\r\n\r\n        setSortConfig({ key, direction: sortDirection });\r\n    };\r\n\r\n    useMemo(() => {\r\n        currentItems.sort((a, b) => {\r\n            if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                return sortConfig.direction === \"ascending\" ? -1 : 1;\r\n            }\r\n            if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                return sortConfig.direction === \"ascending\" ? 1 : -1;\r\n            }\r\n            return 0;\r\n        });\r\n        return currentItems;\r\n    }, [sortConfig, currentItems]);\r\n\r\n    const handleAddUnit = (itemID) => {\r\n        // duping to not directly mutate state\r\n        let tempCurrentItems = [...currentItems];\r\n\r\n        tempCurrentItems.forEach((item) => {\r\n            if (item.itemID === itemID) {\r\n                item.qty += 1;\r\n                item.totalPrice = parseFloat((item.unitPrice * Number(item.qty)).toFixed(2));\r\n            }\r\n        });\r\n\r\n        // setting current items to the newly changed current items\r\n        // which also updates table rows and receipt bar\r\n        setCurrentItems(tempCurrentItems);\r\n    };\r\n\r\n    const handleRemoveUnit = (itemID) => {\r\n        // duping to not directly mutate state\r\n        let tempCurrentItems = [...currentItems];\r\n\r\n        tempCurrentItems.forEach((item) => {\r\n            if (item.itemID === itemID && item.qty > 1) {\r\n                item.qty -= 1;\r\n                item.totalPrice = parseFloat((item.unitPrice * Number(item.qty)).toFixed(2));\r\n            }\r\n        });\r\n\r\n        // setting current items to the newly changed current items\r\n        // which also updates table rows and receipt bar\r\n        setCurrentItems(tempCurrentItems);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <table className=\"MainTable\" id=\"table-to-xls\">\r\n                <thead>\r\n                    <TableHeader requestSort={requestSort} sortConfig={sortConfig} />\r\n                </thead>\r\n                <tbody>\r\n                    <TableInput\r\n                        currentItems={currentItems}\r\n                        allItems={allItems}\r\n                        setCurrentItems={setCurrentItems}\r\n                        handleRemoveUnit={handleRemoveUnit}\r\n                        handleAddUnit={handleAddUnit}\r\n                    />\r\n\r\n                    <TableRowGen\r\n                        currentItems={currentItems}\r\n                        handleRemoveUnit={handleRemoveUnit}\r\n                        handleAddUnit={handleAddUnit}\r\n                    />\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainTable;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\r\nimport \"../stylesheets/receiptbar.css\";\r\nimport TextTransition, { presets } from \"react-text-transition\";\r\n\r\nfunction ReceiptBar({ total, grandTotal, currentItemsLength, onClickCancel }) {\r\n    const [change, setChange] = useState();\r\n    const [payment, setPayment] = useState(\"\");\r\n    let pre = \"\";\r\n\r\n    function isNumeric(n) {\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n    }\r\n\r\n    const handlePaymentInput = (e) => {\r\n        if (isNumeric(+e.target.value)) {\r\n            setPayment(e.target.value);\r\n        }\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        setPayment(\"\");\r\n        onClickCancel();\r\n    };\r\n\r\n    useEffect(() => {\r\n        setChange(parseFloat((Number(payment) - Number(grandTotal)).toFixed(2)));\r\n    }, [payment, grandTotal]);\r\n\r\n    return (\r\n        <div className=\"rb-container\">\r\n            <div className=\"rb-receipt-number-container\">\r\n                <p>Receipt No. 5432</p>\r\n            </div>\r\n\r\n            <h1 className=\"rb-cost-text\">\r\n                <TextTransition\r\n                    text={`Rs. ${grandTotal}`}\r\n                    noOverflow\r\n                    springConfig={{ mass: 1, tension: 200, friction: 16 }}\r\n                />\r\n            </h1>\r\n\r\n            <div className=\"rb-gst-container\">\r\n                <p>Gross Total - Rs. {total}</p>\r\n                <p>GST - {grandTotal >= 1000 ? \"5%\" : \"0%\"}</p>\r\n                <p>Discount - 0%</p>\r\n            </div>\r\n\r\n            <div className=\"rb-payment-container\">\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"payment\"\r\n                    id=\"payment\"\r\n                    placeholder=\"Add Payment\"\r\n                    className=\"rb-payment-input\"\r\n                    onChange={handlePaymentInput}\r\n                    value={payment}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"rb-change-add-container\">\r\n                <AnimatePresence>\r\n                    {change >= 0 ? (pre = \"Change - Rs.\") : (pre = \"Add Rs.\")}\r\n                    {change >= 0 ? (\r\n                        <motion.span\r\n                            initial={{ translateY: 25, opacity: 0 }}\r\n                            animate={{ translateY: 0, opacity: 1 }}\r\n                            exit={{ translateY: 25, opacity: 0 }}\r\n                            transition={{ duration: 0.25 }}\r\n                            className=\"rb-change-text\"\r\n                        >\r\n                            <TextTransition\r\n                                text={`${pre} ${change}`}\r\n                                springConfig={presets.wobbly}\r\n                            />\r\n                        </motion.span>\r\n                    ) : (\r\n                        <motion.span\r\n                            initial={{ translateY: 25, opacity: 0 }}\r\n                            animate={{ translateY: 0, opacity: 1 }}\r\n                            transition={{ duration: 0.25 }}\r\n                            exit={{ translateY: 25, opacity: 0 }}\r\n                            className=\"rb-change-text\"\r\n                        >\r\n                            <TextTransition\r\n                                text={`${pre} ${Math.abs(change)}`}\r\n                                springConfig={presets.wobbly}\r\n                            />\r\n                        </motion.span>\r\n                    )}\r\n                </AnimatePresence>\r\n            </div>\r\n\r\n            <div className=\"rb-print-container\">\r\n                <div className=\"rb-print-sizer\">\r\n                    {currentItemsLength === 0 || change < 0 ? (\r\n                        <motion.button className=\"default-btn\" disabled={true}>\r\n                            Change Remaining\r\n                        </motion.button>\r\n                    ) : (\r\n                        <ReactHTMLTableToExcel\r\n                            id=\"test-table-xls-button\"\r\n                            className=\"default-btn\"\r\n                            table=\"table-to-xls\"\r\n                            filename={\"Table By PostSys \" + new Date().toLocaleDateString()}\r\n                            sheet=\"tablexls\"\r\n                            buttonText=\"Download\"\r\n                        />\r\n                    )}\r\n\r\n                    <button className=\"rb-cancel block\" onClick={handleCancelClick}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReceiptBar;\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nimport \"../../stylesheets/mainnav.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction WorkspaceNav() {\r\n    const { loginWithRedirect, logout, isAuthenticated, user } = useAuth0();\r\n\r\n    let logoutURL = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n        // dev code\r\n        logoutURL = \"http://localhost:3000/#/\";\r\n    } else {\r\n        // production code\r\n        logoutURL = \"https://dakheera47.github.io/PostSys/#/\";\r\n    }\r\n\r\n    return (\r\n        <motion.div\r\n            initial={{ translateY: -100 }}\r\n            animate={{ translateY: 0 }}\r\n            className=\"nav-container\"\r\n        >\r\n            <div className=\"nav-left-container\">\r\n                <NavLink className=\"nav-brand\" to=\"/\">\r\n                    PostSys\r\n                </NavLink>\r\n            </div>\r\n\r\n            <div className=\"nav-center-container\">\r\n                <button className=\"nav-center-btn center-underline\">Projects</button>\r\n                <button className=\"nav-center-btn center-underline\">Edit</button>\r\n                <button className=\"nav-center-btn center-underline\">Clear</button>\r\n            </div>\r\n\r\n            <div className=\"nav-right-container\">\r\n                {isAuthenticated ? (\r\n                    // if logged in\r\n                    <>\r\n                        <button\r\n                            className=\"nav-logout-btn center-underline\"\r\n                            onClick={() =>\r\n                                logout({\r\n                                    returnTo: logoutURL,\r\n                                })\r\n                            }\r\n                        >\r\n                            Sign out from {user.name}\r\n                        </button>\r\n                        <img className=\"nav-user-img\" src={user.picture} alt=\"Profile\" />\r\n                    </>\r\n                ) : (\r\n                    // if not logged in\r\n                    <>\r\n                        <button className=\"nav-sign-in\" onClick={() => loginWithRedirect()}>\r\n                            Sign In\r\n                        </button>\r\n                        <button className=\"nav-sign-up\" onClick={() => loginWithRedirect()}>\r\n                            Register\r\n                        </button>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </motion.div>\r\n    );\r\n}\r\n\r\nexport default WorkspaceNav;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport MainTable from \"../components/table/MainTable\";\r\nimport ReceiptBar from \"../components/ReceiptBar\";\r\nimport { motion } from \"framer-motion\";\r\nimport { ItemContext } from \"../contexts/ItemsContext\";\r\nimport WorkspaceNav from \"../components/nav/WorkspaceNav\";\r\n\r\nfunction Workspace() {\r\n    const [items, setItems] = useContext(ItemContext);\r\n\r\n    const [total, setTotal] = useState(0);\r\n    const [grandTotal, setGrandTotal] = useState(0);\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n\r\n    // Title upon loading document\r\n    useEffect(() => {\r\n        document.title = \"Workspace | Postsys\";\r\n    }, []);\r\n\r\n    const onClickCancel = () => {\r\n        setCurrentItems([]);\r\n        setGrandTotal(0);\r\n        setTotal(0);\r\n    };\r\n\r\n    let onTotalChange = (t) => {\r\n        // only round to the nearest digit if total over 100\r\n        if (t >= 100) {\r\n            setTotal(Math.round(t));\r\n        } else {\r\n            setTotal(parseFloat(t.toFixed(2)));\r\n        }\r\n\r\n        // applying gst only when total cost above 5000\r\n        if (total >= 1000) {\r\n            setGrandTotal(parseFloat((total * 1.05).toFixed(2)));\r\n        } else {\r\n            setGrandTotal(total);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {/* {workspaceNav} */}\r\n            <WorkspaceNav />\r\n            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\r\n                <MainTable\r\n                    items={items}\r\n                    setItems={setItems}\r\n                    onTotalChange={onTotalChange}\r\n                    currentItems={currentItems}\r\n                    setCurrentItems={setCurrentItems}\r\n                />\r\n                <ReceiptBar\r\n                    total={total}\r\n                    grandTotal={grandTotal}\r\n                    currentItemsLength={currentItems.length}\r\n                    onClickCancel={onClickCancel}\r\n                />\r\n            </motion.div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Workspace;\r\n"],"sourceRoot":""}