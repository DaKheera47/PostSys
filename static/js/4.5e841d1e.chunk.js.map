{"version":3,"sources":["components/displayComponents/DisplayArrows.js","components/table/TableHeader.js","components/table/TableInput.js","components/table/TableRow.js","components/table/MainTable.js","components/ReceiptBar.js","components/nav/WorkspaceNav.js","pages/workspace.js"],"names":["ArrowUp","svg","width","height","viewBox","fill","xmlns","whileHover","scale","whileTap","d","ArrowDown","TableHeader","DisplayArrow","requestSort","sortConfig","allColumns","forEach","column","direction","key","recognizer","isArrowInline","className","map","hasSorting","td","onClick","cssClassName","display","TableInput","currentItems","allItems","setCurrentItems","handleAddUnit","useState","itemIdForm","setItemIdForm","itemUnitsForm","setItemUnitsForm","getArrowDirection","type","id","onChange","e","target","value","onKeyDown","count","item","itemID","Number","p","qty","itemName","unitPrice","totalPrice","tempCurrentItems","TableRow","handleRemoveUnit","handleRemoveItem","itemVariant","visible","opacity","x","hidden","tr","initial","animate","exit","layout","variants","MainTable","sortDirection","items","onTotalChange","totalCost","setTotalCost","setSortConfig","columns","useEffect","num","useMemo","sort","a","b","parseFloat","toFixed","index","indexOf","splice","ReceiptBar","total","grandTotal","currentItemsLength","onClickCancel","change","setChange","payment","setPayment","pre","text","noOverflow","springConfig","mass","tension","friction","name","placeholder","n","isNaN","isFinite","span","translateY","transition","duration","Math","abs","presets","wobbly","button","disabled","table","filename","Date","toLocaleDateString","sheet","buttonText","WorkspaceNav","toggleEditMode","useAuth0","loginWithRedirect","logout","isAuthenticated","user","logoutURL","div","to","returnTo","src","picture","alt","Workspace","useContext","ItemContext","setItems","setTotal","editMode","setEditMode","setGrandTotal","document","title","t","round","length"],"mappings":"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","file":"static/js/4.5e841d1e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nexport const ArrowUp = (\r\n    <motion.svg\r\n        width=\"15\"\r\n        height=\"10\"\r\n        viewBox=\"0 0 15 10\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        whileHover={{ scale: 1.1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n    >\r\n        <path\r\n            d=\"M0.239728 9.16423L0.731073 9.72266C0.885708 9.89706 1.09144 9.99313 1.31132 9.99313C1.53108 9.99313 1.73706 9.89706 1.89169 9.72266L7.49662 3.39616L13.108 9.72968C13.2624 9.90408 13.4684 10 13.6881 10C13.9079 10 14.114 9.90408 14.2685 9.72968L14.76 9.17469C15.08 8.81378 15.08 8.22589 14.76 7.86498L8.07894 0.297057C7.92455 0.122797 7.71881 1.54965e-05 7.4971 1.54965e-05H7.49454C7.27466 1.54965e-05 7.06893 0.122934 6.91454 0.297057L0.239728 7.84448C0.0850922 8.01874 0.00021303 8.25796 -3.0874e-05 8.506C-3.0874e-05 8.75418 0.0850922 8.9901 0.239728 9.16423Z\"\r\n            fill=\"black\"\r\n        />\r\n    </motion.svg>\r\n);\r\n\r\nexport const ArrowDown = (\r\n    <motion.svg\r\n        whileHover={{ scale: 1.1 }}\r\n        whileTap={{ scale: 0.9 }}\r\n        width=\"15\"\r\n        height=\"10\"\r\n        viewBox=\"0 0 15 10\"\r\n        fill=\"none\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n        <path\r\n            d=\"M14.7602 0.835788L14.2689 0.277357C14.1143 0.10296 13.9085 0.00688247 13.6886 0.00688247C13.4689 0.00688247 13.2629 0.10296 13.1083 0.277357L7.50335 6.60385L1.89197 0.270337C1.73758 0.0959395 1.5316 0 1.31184 0C1.09208 0 0.885983 0.0959395 0.731469 0.270337L0.240002 0.825327C-0.0800007 1.18624 -0.0800007 1.77412 0.240002 2.13503L6.92103 9.70296C7.07542 9.87722 7.28116 10 7.50287 10H7.50543C7.72531 10 7.93104 9.87708 8.08543 9.70296L14.7602 2.15554C14.9149 1.98128 14.9998 1.74205 15 1.49401C15 1.24584 14.9149 1.00991 14.7602 0.835788Z\"\r\n            fill=\"black\"\r\n        />\r\n    </motion.svg>\r\n);\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport { ArrowDown, ArrowUp } from \"../displayComponents/DisplayArrows\";\r\n\r\nfunction TableHeader({ requestSort, sortConfig, allColumns }) {\r\n    let DisplayArrow;\r\n\r\n    allColumns.forEach((column) => {\r\n        /* logic for arrow direction and sorting */\r\n\r\n        if (\r\n            // if ascending\r\n            // if correct column\r\n            // if arrow is not inline\r\n            sortConfig.direction === \"ascending\" &&\r\n            sortConfig.key === column.recognizer &&\r\n            column.isArrowInline\r\n        ) {\r\n            DisplayArrow = ArrowDown;\r\n        }\r\n\r\n        if (\r\n            sortConfig.key === column.recognizer &&\r\n            sortConfig.direction === \"descending\" &&\r\n            column.isArrowInline\r\n        ) {\r\n            DisplayArrow = ArrowUp;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <tr className=\"noselect header\">\r\n            {allColumns.map((column) =>\r\n                // mapping through all columns to make cleaner code\r\n                column.hasSorting !== false ? (\r\n                    <motion.td\r\n                        onClick={() => requestSort(column.recognizer)}\r\n                        className={column.cssClassName}\r\n                        whileHover={{ scale: 1.025 }}\r\n                        whileTap={{ scale: 0.975 }}\r\n                        key={column.recognizer}\r\n                    >\r\n                        <span>{column.display}</span>\r\n                        {column.isArrowInline && DisplayArrow}\r\n                    </motion.td>\r\n                ) : (\r\n                    <motion.td className=\"td-disabled\" key={column.recognizer}>\r\n                        <span>{column.display}</span>\r\n                    </motion.td>\r\n                )\r\n            )}\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableHeader;\r\n","import React, { useState } from \"react\";\r\nimport { ArrowDown, ArrowUp } from \"../displayComponents/DisplayArrows\";\r\n\r\nfunction TableInput({\r\n    currentItems,\r\n    allItems,\r\n    setCurrentItems,\r\n    handleAddUnit,\r\n    sortConfig,\r\n    requestSort,\r\n}) {\r\n    const [itemIdForm, setItemIdForm] = useState(\"\");\r\n    const [itemUnitsForm, setItemUnitsForm] = useState(1);\r\n    // logic for form handling\r\n    const handleChange = (e) => {\r\n        if (e.target.id === \"IdInput\") {\r\n            setItemIdForm(e.target.value);\r\n        }\r\n        if (e.target.id === \"UnitsInput\") {\r\n            setItemUnitsForm(e.target.value);\r\n        }\r\n    };\r\n\r\n    // logic on input\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            if (itemIdForm !== \"\" && itemUnitsForm !== \"\") {\r\n                let count = 1;\r\n\r\n                // counting occurances of new item\r\n                currentItems.map((item) => item.itemID === Number(itemIdForm) && count++);\r\n\r\n                if (count <= 1) {\r\n                    // changing current display items\r\n                    allItems.forEach((item) => {\r\n                        if (item.itemID === Number(itemIdForm)) {\r\n                            // adding new item\r\n                            setCurrentItems((p) => [\r\n                                {\r\n                                    itemID: Number(itemIdForm),\r\n                                    qty: Number(itemUnitsForm),\r\n                                    itemName: item.itemName,\r\n                                    unitPrice: item.unitPrice,\r\n                                    totalPrice: item.unitPrice * Number(itemUnitsForm),\r\n                                },\r\n                                ...p,\r\n                            ]);\r\n\r\n                            // resetting value back to empty after changes\r\n                            setItemIdForm(\"\");\r\n                            setItemUnitsForm(1);\r\n                        }\r\n                    });\r\n                } else {\r\n                    // checking if item code already exists. if it does, add the quantity to the previous value\r\n                    // duping current items to change\r\n                    let tempCurrentItems = [...currentItems];\r\n\r\n                    tempCurrentItems.forEach((item) => {\r\n                        if (item.itemID === Number(itemIdForm)) {\r\n                            handleAddUnit(item.itemID);\r\n                            setItemIdForm(\"\");\r\n                            setItemUnitsForm(1);\r\n                        }\r\n                    });\r\n\r\n                    // setting current items to the newly changed current items\r\n                    // which also updates table rows and receipt bar\r\n                    setCurrentItems(tempCurrentItems);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // function for arrow direction calculation\r\n    const getArrowDirection = (recognizer) => {\r\n        if (sortConfig.direction === \"ascending\" && sortConfig.key === recognizer) {\r\n            return ArrowDown;\r\n        }\r\n        if (sortConfig.direction === \"descending\" && sortConfig.key === recognizer) {\r\n            return ArrowUp;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <tr>\r\n            {/* placehholder to keep space */}\r\n            <td className=\"td-delete\"></td>\r\n            <td className=\"td-id\">\r\n                {/* item id input field */}\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"IdInput\"\r\n                    className=\"idInput\"\r\n                    onChange={handleChange}\r\n                    onKeyDown={handleKeyDown}\r\n                    value={itemIdForm}\r\n                />\r\n            </td>\r\n            {/* placehholder to keep space */}\r\n            <td className=\"td-name\">\r\n                <a onClick={() => requestSort(\"itemName\")}>{getArrowDirection(\"itemName\")}</a>\r\n            </td>\r\n            <td className=\"td-qty\">\r\n                <a onClick={() => requestSort(\"qty\")}>{getArrowDirection(\"qty\")}</a>\r\n            </td>\r\n            {/* placecholders to keep space */}\r\n            <td className=\"td-price\">\r\n                <a onClick={() => requestSort(\"unitPrice\")}>{getArrowDirection(\"unitPrice\")}</a>\r\n            </td>\r\n            <td className=\"td-price\">\r\n                <a onClick={() => requestSort(\"totalPrice\")}>{getArrowDirection(\"totalPrice\")}</a>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default TableInput;\r\n","import React from \"react\";\r\nimport { motion, AnimateSharedLayout, AnimatePresence } from \"framer-motion\";\r\nimport { HiPlus } from \"react-icons/hi\";\r\nimport { FiMinus } from \"react-icons/fi\";\r\nimport { BsTrashFill } from \"react-icons/bs\";\r\n\r\nfunction TableRow({ currentItems, handleRemoveUnit, handleAddUnit, handleRemoveItem }) {\r\n    const itemVariant = {\r\n        visible: { opacity: 1, x: 0 },\r\n        hidden: { opacity: 0 },\r\n    };\r\n\r\n    return (\r\n        <AnimateSharedLayout>\r\n            <AnimatePresence>\r\n                {currentItems.map((item) => (\r\n                    <motion.tr\r\n                        initial={{ opacity: 0 }}\r\n                        animate={{ opacity: 1 }}\r\n                        exit={{ opacity: 0 }}\r\n                        key={item.itemID}\r\n                        layout\r\n                    >\r\n                        <motion.td className=\"td-delete\" variants={itemVariant}>\r\n                            <BsTrashFill\r\n                                className=\"td-trash\"\r\n                                onClick={() => {\r\n                                    handleRemoveItem(item);\r\n                                }}\r\n                            />\r\n                        </motion.td>\r\n\r\n                        <motion.td className=\"td-id\" variants={itemVariant}>\r\n                            {item.itemID}\r\n                        </motion.td>\r\n\r\n                        <motion.td className=\"td-name\" variants={itemVariant}>\r\n                            {item.itemName}\r\n                        </motion.td>\r\n\r\n                        <motion.td className=\"td-qty noselect\" variants={itemVariant}>\r\n                            <FiMinus\r\n                                onClick={() => handleRemoveUnit(item.itemID)}\r\n                                className=\"table-row-qty-arrow\"\r\n                            />\r\n\r\n                            {item.qty}\r\n\r\n                            <HiPlus\r\n                                onClick={() => handleAddUnit(item.itemID)}\r\n                                className=\"table-row-qty-arrow\"\r\n                            />\r\n                        </motion.td>\r\n\r\n                        <motion.td className=\"td-price\" variants={itemVariant}>\r\n                            Rs. {item.unitPrice}\r\n                        </motion.td>\r\n\r\n                        <motion.td className=\"td-price\" variants={itemVariant}>\r\n                            Rs. {item.totalPrice}\r\n                        </motion.td>\r\n                    </motion.tr>\r\n                ))}\r\n            </AnimatePresence>\r\n        </AnimateSharedLayout>\r\n    );\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport \"../../stylesheets/maintable.css\";\r\n\r\nimport TableHeader from \"./TableHeader\";\r\nimport TableInput from \"./TableInput\";\r\nimport TableRowGen from \"./TableRow\";\r\n\r\nfunction MainTable({ items: allItems, onTotalChange, setCurrentItems, currentItems }) {\r\n    const [totalCost, setTotalCost] = useState(0);\r\n    const [sortConfig, setSortConfig] = useState([...allItems]);\r\n    const columns = [\r\n        {\r\n            recognizer: \"delete\",\r\n            cssClassName: \"th-delete heading\",\r\n            display: \"Delete\",\r\n            hasSorting: false,\r\n        },\r\n        {\r\n            recognizer: \"itemID\",\r\n            cssClassName: \"th-id heading\",\r\n            display: \"Item ID\",\r\n            isArrowInline: true,\r\n        },\r\n        {\r\n            recognizer: \"itemName\",\r\n            cssClassName: \"th-name heading\",\r\n            display: \"Item Name/Description\",\r\n            isArrowInline: false,\r\n        },\r\n        {\r\n            recognizer: \"qty\",\r\n            cssClassName: \"th-qty heading\",\r\n            display: \"Units\",\r\n            isArrowInline: false,\r\n        },\r\n        {\r\n            recognizer: \"unitPrice\",\r\n            cssClassName: \"th-unitPrice heading\",\r\n            display: \"Unit Price\",\r\n            isArrowInline: false,\r\n        },\r\n        {\r\n            recognizer: \"totalPrice\",\r\n            cssClassName: \"th-totalPrice heading\",\r\n            display: \"Total Price\",\r\n            isArrowInline: false,\r\n        },\r\n    ];\r\n\r\n    // send value of totalCost to the workspace component for rendering in the receipt bar\r\n    useEffect(() => {\r\n        onTotalChange(totalCost);\r\n    }, [totalCost, onTotalChange]);\r\n\r\n    // adding total value to variable as soon as currentItems changes\r\n    useEffect(() => {\r\n        let num = 0;\r\n\r\n        currentItems.forEach((item) => {\r\n            item.totalPrice ? (num += item.totalPrice) : (num += 0);\r\n        });\r\n\r\n        setTotalCost(num);\r\n    }, [currentItems]);\r\n\r\n    let sortDirection;\r\n\r\n    const requestSort = (key) => {\r\n        sortDirection = \"ascending\";\r\n\r\n        if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\r\n            sortDirection = \"descending\";\r\n        }\r\n\r\n        setSortConfig({ key, direction: sortDirection });\r\n    };\r\n\r\n    useMemo(() => {\r\n        currentItems.sort((a, b) => {\r\n            if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                return sortConfig.direction === \"ascending\" ? -1 : 1;\r\n            }\r\n            if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                return sortConfig.direction === \"ascending\" ? 1 : -1;\r\n            }\r\n            return 0;\r\n        });\r\n        return currentItems;\r\n    }, [sortConfig, currentItems]);\r\n\r\n    const handleAddUnit = (itemID) => {\r\n        // duping to not directly mutate state\r\n        let tempCurrentItems = [...currentItems];\r\n\r\n        tempCurrentItems.forEach((item) => {\r\n            if (item.itemID === itemID) {\r\n                item.qty += 1;\r\n                item.totalPrice = parseFloat((item.unitPrice * Number(item.qty)).toFixed(2));\r\n            }\r\n        });\r\n\r\n        // setting current items to the newly changed current items\r\n        // which also updates table rows and receipt bar\r\n        setCurrentItems(tempCurrentItems);\r\n    };\r\n\r\n    const handleRemoveUnit = (itemID) => {\r\n        // duping to not directly mutate state\r\n        let tempCurrentItems = [...currentItems];\r\n\r\n        tempCurrentItems.forEach((item) => {\r\n            if (item.itemID === itemID && item.qty > 1) {\r\n                item.qty -= 1;\r\n                item.totalPrice = parseFloat((item.unitPrice * Number(item.qty)).toFixed(2));\r\n            }\r\n        });\r\n\r\n        // setting current items to the newly changed current items\r\n        // which also updates table rows and receipt bar\r\n        setCurrentItems(tempCurrentItems);\r\n    };\r\n\r\n    const handleRemoveItem = (item) => {\r\n        const index = currentItems.indexOf(item);\r\n        if (index > -1) {\r\n            let tempCurrentItems = [...currentItems];\r\n            tempCurrentItems.splice(index, 1);\r\n            setCurrentItems(tempCurrentItems);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <table className=\"MainTable\" id=\"table-to-xls\">\r\n                <thead>\r\n                    <TableHeader\r\n                        requestSort={requestSort}\r\n                        sortConfig={sortConfig}\r\n                        allColumns={columns}\r\n                    />\r\n                </thead>\r\n                <tbody>\r\n                    <TableInput\r\n                        currentItems={currentItems}\r\n                        allItems={allItems}\r\n                        setCurrentItems={setCurrentItems}\r\n                        handleRemoveUnit={handleRemoveUnit}\r\n                        handleAddUnit={handleAddUnit}\r\n                        sortConfig={sortConfig}\r\n                        columns={columns}\r\n                        requestSort={requestSort}\r\n                    />\r\n\r\n                    <TableRowGen\r\n                        currentItems={currentItems}\r\n                        handleRemoveUnit={handleRemoveUnit}\r\n                        handleAddUnit={handleAddUnit}\r\n                        handleRemoveItem={handleRemoveItem}\r\n                    />\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MainTable;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport ReactHTMLTableToExcel from \"react-html-table-to-excel\";\r\nimport \"../stylesheets/receiptbar.css\";\r\nimport TextTransition, { presets } from \"react-text-transition\";\r\n\r\nfunction ReceiptBar({ total, grandTotal, currentItemsLength, onClickCancel }) {\r\n    const [change, setChange] = useState();\r\n    const [payment, setPayment] = useState(\"\");\r\n    let pre = \"\";\r\n\r\n    function isNumeric(n) {\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n    }\r\n\r\n    const handlePaymentInput = (e) => {\r\n        if (isNumeric(+e.target.value)) {\r\n            setPayment(e.target.value);\r\n        }\r\n    };\r\n\r\n    const handleCancelClick = () => {\r\n        setPayment(\"\");\r\n        onClickCancel();\r\n    };\r\n\r\n    useEffect(() => {\r\n        setChange(parseFloat((Number(payment) - Number(grandTotal)).toFixed(2)));\r\n    }, [payment, grandTotal]);\r\n\r\n    return (\r\n        <div className=\"rb-container\">\r\n            <div className=\"rb-receipt-number-container\">\r\n                <p>Receipt No. 5432</p>\r\n            </div>\r\n\r\n            <h1 className=\"rb-cost-text\">\r\n                <TextTransition\r\n                    text={`Rs. ${grandTotal}`}\r\n                    noOverflow\r\n                    springConfig={{ mass: 1, tension: 200, friction: 16 }}\r\n                />\r\n            </h1>\r\n\r\n            <div className=\"rb-gst-container\">\r\n                <p>Gross Total - Rs. {total}</p>\r\n                <p>GST - {grandTotal >= 1000 ? \"5%\" : \"0%\"}</p>\r\n                <p>Discount - 0%</p>\r\n            </div>\r\n\r\n            <div className=\"rb-payment-container\">\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"payment\"\r\n                    id=\"payment\"\r\n                    placeholder=\"Add Payment\"\r\n                    className=\"rb-payment-input\"\r\n                    onChange={handlePaymentInput}\r\n                    value={payment}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"rb-change-add-container\">\r\n                <AnimatePresence>\r\n                    {change >= 0 ? (pre = \"Change - Rs.\") : (pre = \"Add Rs.\")}\r\n                    <motion.span\r\n                        initial={{ translateY: 25, opacity: 0 }}\r\n                        animate={{ translateY: 0, opacity: 1 }}\r\n                        exit={{ translateY: 25, opacity: 0 }}\r\n                        transition={{ duration: 0.25 }}\r\n                        className=\"rb-change-text\"\r\n                    >\r\n                        <TextTransition\r\n                            text={`${pre} ${Math.abs(change)}`}\r\n                            springConfig={presets.wobbly}\r\n                        />\r\n                    </motion.span>\r\n                </AnimatePresence>\r\n            </div>\r\n\r\n            <div className=\"rb-print-container\">\r\n                <div className=\"rb-print-sizer\">\r\n                    {currentItemsLength === 0 || change < 0 ? (\r\n                        <motion.button className=\"default-btn\" disabled={true}>\r\n                            Print\r\n                        </motion.button>\r\n                    ) : (\r\n                        <ReactHTMLTableToExcel\r\n                            id=\"test-table-xls-button\"\r\n                            className=\"default-btn\"\r\n                            table=\"table-to-xls\"\r\n                            filename={\"Table By PostSys \" + new Date().toLocaleDateString()}\r\n                            sheet=\"tablexls\"\r\n                            buttonText=\"Print\"\r\n                        />\r\n                    )}\r\n\r\n                    <button className=\"rb-cancel block\" onClick={handleCancelClick}>\r\n                        Cancel\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReceiptBar;\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\n\r\nimport \"../../stylesheets/mainnav.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction WorkspaceNav({ toggleEditMode }) {\r\n    const { loginWithRedirect, logout, isAuthenticated, user } = useAuth0();\r\n\r\n    let logoutURL = \"\";\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n        // dev code\r\n        logoutURL = \"http://localhost:3000/#/\";\r\n    } else {\r\n        // production code\r\n        logoutURL = \"https://dakheera47.github.io/PostSys/#/\";\r\n    }\r\n\r\n    return (\r\n        <motion.div\r\n            initial={{ translateY: -100 }}\r\n            animate={{ translateY: 0 }}\r\n            className=\"nav-container\"\r\n        >\r\n            <div className=\"nav-left-container\">\r\n                <NavLink className=\"nav-brand\" to=\"/\">\r\n                    PostSys\r\n                </NavLink>\r\n            </div>\r\n\r\n            <div className=\"nav-center-container\">\r\n                <button className=\"nav-center-btn center-underline\">Projects</button>\r\n                <button className=\"nav-center-btn center-underline\" onClick={toggleEditMode}>\r\n                    Edit\r\n                </button>\r\n                <button className=\"nav-center-btn center-underline\">Clear</button>\r\n            </div>\r\n\r\n            <div className=\"nav-right-container\">\r\n                {isAuthenticated ? (\r\n                    // if logged in\r\n                    <>\r\n                        <button\r\n                            className=\"nav-logout-btn center-underline\"\r\n                            onClick={() =>\r\n                                logout({\r\n                                    returnTo: logoutURL,\r\n                                })\r\n                            }\r\n                        >\r\n                            Sign out from {user.name}\r\n                        </button>\r\n                        <img className=\"nav-user-img\" src={user.picture} alt=\"Profile\" />\r\n                    </>\r\n                ) : (\r\n                    // if not logged in\r\n                    <>\r\n                        <button className=\"nav-sign-in\" onClick={() => loginWithRedirect()}>\r\n                            Sign In\r\n                        </button>\r\n                        <button className=\"nav-sign-up\" onClick={() => loginWithRedirect()}>\r\n                            Register\r\n                        </button>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </motion.div>\r\n    );\r\n}\r\n\r\nexport default WorkspaceNav;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { ItemContext } from \"../contexts/ItemsContext\";\r\nimport MainTable from \"../components/table/MainTable\";\r\nimport ReceiptBar from \"../components/ReceiptBar\";\r\nimport WorkspaceNav from \"../components/nav/WorkspaceNav\";\r\n\r\nfunction Workspace() {\r\n    const [items, setItems] = useContext(ItemContext);\r\n\r\n    const [total, setTotal] = useState(0);\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [grandTotal, setGrandTotal] = useState(0);\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n\r\n    // Title upon loading document\r\n    useEffect(() => {\r\n        document.title = \"Workspace | Postsys\";\r\n    }, []);\r\n\r\n    const onClickCancel = () => {\r\n        setCurrentItems([]);\r\n        setGrandTotal(0);\r\n        setTotal(0);\r\n    };\r\n\r\n    const toggleEditMode = () => {\r\n        setEditMode(!editMode);\r\n    };\r\n\r\n    let onTotalChange = (t) => {\r\n        // only round to the nearest digit if total over 100\r\n        if (t >= 100) {\r\n            setTotal(Math.round(t));\r\n        } else {\r\n            setTotal(parseFloat(t.toFixed(2)));\r\n        }\r\n\r\n        // applying gst only when total cost above 5000\r\n        if (total >= 1000) {\r\n            setGrandTotal(parseFloat((total * 1.05).toFixed(2)));\r\n        } else {\r\n            setGrandTotal(total);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <WorkspaceNav toggleEditMode={toggleEditMode} />\r\n            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\r\n                <MainTable\r\n                    items={items}\r\n                    setItems={setItems}\r\n                    onTotalChange={onTotalChange}\r\n                    currentItems={currentItems}\r\n                    setCurrentItems={setCurrentItems}\r\n                />\r\n\r\n                <ReceiptBar\r\n                    total={total}\r\n                    grandTotal={grandTotal}\r\n                    currentItemsLength={currentItems.length}\r\n                    onClickCancel={onClickCancel}\r\n                />\r\n            </motion.div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Workspace;\r\n"],"sourceRoot":""}