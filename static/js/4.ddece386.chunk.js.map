{"version":3,"sources":["components/MainTable.js","components/ReceiptBar.js","pages/workspace.js"],"names":["MainTable","direction","allItems","items","onTotalChange","itemsFromWorkspace","currentItems","useState","totalCost","setTotalCost","sortConfig","setSortConfig","itemIdForm","setItemIdForm","itemUnitsForm","setItemUnitsForm","setCurrentItems","constraintsRef","useRef","arrowDown","svg","whileHover","scale","whileTap","width","height","viewBox","fill","xmlns","d","arrowUp","useMemo","sort","a","b","key","handleChange","e","target","id","value","handleKeyDown","count","map","item","itemID","Number","forEach","p","qty","itemName","unitPrice","totalPrice","parseFloat","toFixed","useEffect","num","console","log","listVariant","visible","opacity","hidden","exit","x","itemVariant","className","recognizer","cssClassName","display","column","td","onClick","ref","type","onChange","onKeyDown","min","length","tr","initial","animate","variants","layout","ReceiptBar","total","grandTotal","change","setChange","payment","setPayment","pre","text","springConfig","mass","tension","friction","name","placeholder","n","isNaN","isFinite","span","translateY","transition","duration","presets","wobbly","Math","abs","Workspace","useContext","ItemContext","setItems","setTotal","setGrandTotal","document","title","workspaceNav","Nav","mode","left","center","url","cont","onClickClear","right","img","div","t","round"],"mappings":"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","file":"static/js/4.ddece386.chunk.js","sourcesContent":["import React, { useMemo, useState, useEffect, useRef } from \"react\";\r\nimport \"../stylesheets/maintable.css\";\r\nimport { motion, AnimateSharedLayout, AnimatePresence } from \"framer-motion\";\r\n\r\nfunction MainTable({ items: allItems, onTotalChange, currentItems: itemsFromWorkspace }) {\r\n    const [totalCost, setTotalCost] = useState(0);\r\n    const [sortConfig, setSortConfig] = useState([...allItems]);\r\n    const [itemIdForm, setItemIdForm] = useState(\"\");\r\n    const [itemUnitsForm, setItemUnitsForm] = useState(1);\r\n    const [currentItems, setCurrentItems] = useState(itemsFromWorkspace);\r\n    const constraintsRef = useRef(null);\r\n    const allColumns = [\r\n        {\r\n            recognizer: \"itemID\",\r\n            cssClassName: \"th-id heading\",\r\n            display: \"Item ID\",\r\n        },\r\n        {\r\n            recognizer: \"itemName\",\r\n            cssClassName: \"th-name heading\",\r\n            display: \"Item Name/Description\",\r\n        },\r\n        {\r\n            recognizer: \"qty\",\r\n            cssClassName: \"th-qty heading\",\r\n            display: \"Units\",\r\n        },\r\n        {\r\n            recognizer: \"unitPrice\",\r\n            cssClassName: \"th-unitPrice heading\",\r\n            display: \"Unit Price\",\r\n        },\r\n        {\r\n            recognizer: \"totalPrice\",\r\n            cssClassName: \"th-totalPrice heading\",\r\n            display: \"Total Price\",\r\n        },\r\n    ];\r\n\r\n    // Logic for sorting\r\n    let direction;\r\n    const arrowDown = (\r\n        <motion.svg\r\n            whileHover={{ scale: 1.1 }}\r\n            whileTap={{ scale: 0.9 }}\r\n            width=\"15\"\r\n            height=\"10\"\r\n            viewBox=\"0 0 15 10\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n            <path\r\n                d=\"M14.7602 0.835788L14.2689 0.277357C14.1143 0.10296 13.9085 0.00688247 13.6886 0.00688247C13.4689 0.00688247 13.2629 0.10296 13.1083 0.277357L7.50335 6.60385L1.89197 0.270337C1.73758 0.0959395 1.5316 0 1.31184 0C1.09208 0 0.885983 0.0959395 0.731469 0.270337L0.240002 0.825327C-0.0800007 1.18624 -0.0800007 1.77412 0.240002 2.13503L6.92103 9.70296C7.07542 9.87722 7.28116 10 7.50287 10H7.50543C7.72531 10 7.93104 9.87708 8.08543 9.70296L14.7602 2.15554C14.9149 1.98128 14.9998 1.74205 15 1.49401C15 1.24584 14.9149 1.00991 14.7602 0.835788Z\"\r\n                fill=\"black\"\r\n            />\r\n        </motion.svg>\r\n    );\r\n\r\n    const arrowUp = (\r\n        <motion.svg\r\n            width=\"15\"\r\n            height=\"10\"\r\n            viewBox=\"0 0 15 10\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            whileHover={{ scale: 1.1 }}\r\n            whileTap={{ scale: 0.9 }}\r\n        >\r\n            <path\r\n                d=\"M0.239728 9.16423L0.731073 9.72266C0.885708 9.89706 1.09144 9.99313 1.31132 9.99313C1.53108 9.99313 1.73706 9.89706 1.89169 9.72266L7.49662 3.39616L13.108 9.72968C13.2624 9.90408 13.4684 10 13.6881 10C13.9079 10 14.114 9.90408 14.2685 9.72968L14.76 9.17469C15.08 8.81378 15.08 8.22589 14.76 7.86498L8.07894 0.297057C7.92455 0.122797 7.71881 1.54965e-05 7.4971 1.54965e-05H7.49454C7.27466 1.54965e-05 7.06893 0.122934 6.91454 0.297057L0.239728 7.84448C0.0850922 8.01874 0.00021303 8.25796 -3.0874e-05 8.506C-3.0874e-05 8.75418 0.0850922 8.9901 0.239728 9.16423Z\"\r\n                fill=\"black\"\r\n            />\r\n        </motion.svg>\r\n    );\r\n\r\n    // reversing sorting on subsequent clicks\r\n    const requestSort = (key) => {\r\n        direction = \"ascending\";\r\n        if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\r\n            direction = \"descending\";\r\n        }\r\n        setSortConfig({ key, direction });\r\n    };\r\n\r\n    // memoizing to save resources\r\n    useMemo(() => {\r\n        currentItems.sort((a, b) => {\r\n            if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                return sortConfig.direction === \"ascending\" ? -1 : 1;\r\n            }\r\n            if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                return sortConfig.direction === \"ascending\" ? 1 : -1;\r\n            }\r\n            return 0;\r\n        });\r\n        return currentItems;\r\n    }, [sortConfig, currentItems]);\r\n\r\n    // logic for form handling\r\n    const handleChange = (e) => {\r\n        switch (e.target.id) {\r\n            case \"IdInput\":\r\n                setItemIdForm(e.target.value);\r\n                break;\r\n\r\n            case \"UnitsInput\":\r\n                setItemUnitsForm(e.target.value);\r\n                break;\r\n\r\n            default:\r\n                setItemIdForm(e.target.value);\r\n                setItemUnitsForm(e.target.value);\r\n        }\r\n    };\r\n\r\n    // logic on input\r\n    const handleKeyDown = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            if (itemIdForm !== \"\" && itemUnitsForm !== \"\") {\r\n                let count = 1;\r\n\r\n                // counting occurances of new item\r\n                currentItems.map((item) => (item.itemID === Number(itemIdForm) ? count++ : null));\r\n\r\n                if (count <= 1) {\r\n                    // changing current display items\r\n                    allItems.forEach((item) => {\r\n                        if (item.itemID === Number(itemIdForm)) {\r\n                            // adding new item\r\n                            setCurrentItems((p) => [\r\n                                {\r\n                                    itemID: Number(itemIdForm),\r\n                                    qty: Number(itemUnitsForm),\r\n                                    itemName: item.itemName,\r\n                                    unitPrice: item.unitPrice,\r\n                                    totalPrice: item.unitPrice * Number(itemUnitsForm),\r\n                                },\r\n                                ...p,\r\n                            ]);\r\n\r\n                            // resetting value back to empty after changes\r\n                            setItemIdForm(\"\");\r\n                            setItemUnitsForm(1);\r\n                        }\r\n                    });\r\n                } else {\r\n                    // checking if item code already exists. if it does, add the quantity to the previous value\r\n                    currentItems.forEach((item) => {\r\n                        if (item.itemID === Number(itemIdForm)) {\r\n                            item.qty = item.qty + Number(itemUnitsForm);\r\n                            item.totalPrice = parseFloat(\r\n                                (item.unitPrice * Number(item.qty)).toFixed(2)\r\n                            );\r\n                            // resetting value back to empty after changes\r\n                            setItemIdForm(\"\");\r\n                            setItemUnitsForm(1);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // send value of totalCost to the workspace component for rendering in the receipt bar\r\n    useEffect(() => {\r\n        onTotalChange(totalCost);\r\n    }, [totalCost, onTotalChange]);\r\n\r\n    // adding total value to variable as soon as currentItems changes\r\n    useEffect(() => {\r\n        let num = 0;\r\n\r\n        currentItems.forEach((item) => {\r\n            item.totalPrice ? (num += item.totalPrice) : (num += 0);\r\n        });\r\n        console.log(`NUM: ${num}`);\r\n        setTotalCost(num);\r\n    }, [currentItems]);\r\n\r\n    // update value of current items when the current items by the workspace change\r\n    useEffect(() => {\r\n        setCurrentItems(itemsFromWorkspace);\r\n    }, [itemsFromWorkspace]);\r\n\r\n    const listVariant = {\r\n        visible: { opacity: 1 },\r\n        hidden: { opacity: 0 },\r\n        exit: { opacity: 0, x: 0 },\r\n    };\r\n\r\n    const itemVariant = {\r\n        visible: { opacity: 1, x: 0 },\r\n        hidden: { opacity: 0, x: -100 },\r\n        exit: { opacity: 0, x: 0 },\r\n    };\r\n\r\n    return (\r\n        <table className=\"MainTable\">\r\n            <thead>\r\n                <tr className=\"noselect header\">\r\n                    {allColumns.map((column) => (\r\n                        <motion.td\r\n                            onClick={() => requestSort(column.recognizer)}\r\n                            className={column.cssClassName}\r\n                            whileHover={{ scale: 1.05 }}\r\n                            whileTap={{ scale: 0.95 }}\r\n                            key={column.recognizer}\r\n                        >\r\n                            <span>{column.display}</span>\r\n                            {sortConfig.direction === \"ascending\" &&\r\n                            sortConfig.key === column.recognizer\r\n                                ? arrowDown\r\n                                : sortConfig.key === column.recognizer &&\r\n                                  sortConfig.direction === \"descending\"\r\n                                ? arrowUp\r\n                                : null}\r\n                        </motion.td>\r\n                    ))}\r\n                </tr>\r\n            </thead>\r\n            <tbody ref={constraintsRef}>\r\n                <tr>\r\n                    <td>\r\n                        {/* item id input field */}\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"IdInput\"\r\n                            className=\"idInput\"\r\n                            onChange={handleChange}\r\n                            onKeyDown={handleKeyDown}\r\n                            value={itemIdForm}\r\n                        />\r\n                    </td>\r\n                    {/* placehholder to keep space */}\r\n                    <td className=\"td-name\"></td>\r\n                    <td>\r\n                        {/* item units input field */}\r\n                        <input\r\n                            type=\"number\"\r\n                            id=\"UnitsInput\"\r\n                            className=\"unitInput\"\r\n                            min={1}\r\n                            onChange={handleChange}\r\n                            onKeyDown={handleKeyDown}\r\n                            value={itemUnitsForm}\r\n                        />\r\n                    </td>\r\n                    {/* placecholders to keep space */}\r\n                    <td className=\"td-price\"></td>\r\n                    <td className=\"td-price\"></td>\r\n                </tr>\r\n\r\n                {/* looping through current items to render rows */}\r\n                {currentItems.length !== 0 ? (\r\n                    <AnimatePresence>\r\n                        <AnimateSharedLayout>\r\n                            {currentItems.map((item) => (\r\n                                <motion.tr\r\n                                    initial=\"hidden\"\r\n                                    animate=\"visible\"\r\n                                    exit=\"exit\"\r\n                                    variants={listVariant}\r\n                                    key={item.itemID}\r\n                                    layout\r\n                                >\r\n                                    <motion.td className=\"td-id\" variants={itemVariant} exit=\"exit\">\r\n                                        {item.itemID}\r\n                                    </motion.td>\r\n                                    <motion.td\r\n                                        className=\"td-name\"\r\n                                        variants={itemVariant}\r\n                                        exit=\"exit\"\r\n                                    >\r\n                                        {item.itemName}\r\n                                    </motion.td>\r\n                                    <motion.td\r\n                                        className=\"td-qty\"\r\n                                        variants={itemVariant}\r\n                                        exit=\"exit\"\r\n                                    >\r\n                                        {item.qty}\r\n                                    </motion.td>\r\n                                    <motion.td\r\n                                        className=\"td-price\"\r\n                                        variants={itemVariant}\r\n                                        exit=\"exit\"\r\n                                    >\r\n                                        Rs. {item.unitPrice}\r\n                                    </motion.td>\r\n                                    <motion.td\r\n                                        className=\"td-price\"\r\n                                        variants={itemVariant}\r\n                                        exit=\"exit\"\r\n                                    >\r\n                                        Rs. {item.totalPrice}\r\n                                    </motion.td>\r\n                                </motion.tr>\r\n                            ))}\r\n                        </AnimateSharedLayout>\r\n                    </AnimatePresence>\r\n                ) : (\r\n                    <tr>\r\n                        <td className=\"td-id\"></td>\r\n                        <td className=\"td-name\"></td>\r\n                        <td className=\"td-qty\"></td>\r\n                        <td className=\"td-price\"></td>\r\n                        <td className=\"td-price\"></td>\r\n                    </tr>\r\n                )}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default MainTable;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport \"../stylesheets/receiptbar.css\";\r\nimport TextTransition, { presets } from \"react-text-transition\";\r\n\r\nfunction ReceiptBar({ total, grandTotal }) {\r\n    const [change, setChange] = useState();\r\n    const [payment, setPayment] = useState(\"\");\r\n    let pre = \"\";\r\n\r\n    function isNumeric(n) {\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n    }\r\n\r\n    const handlePaymentInput = (e) => {\r\n        if (isNumeric(+e.target.value)) {\r\n            setPayment(e.target.value);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setChange(parseFloat((Number(payment) - Number(grandTotal)).toFixed(2)));\r\n    }, [payment, grandTotal]);\r\n\r\n    return (\r\n        <div className=\"rb-container\">\r\n            <div className=\"rb-receipt-number-container\">\r\n                <p>Receipt No. 5432</p>\r\n            </div>\r\n\r\n            <h1 className=\"rb-cost-text\">\r\n                <TextTransition\r\n                    text={`Rs. ${grandTotal}`}\r\n                    springConfig={{ mass: 1, tension: 120, friction: 14 }}\r\n                    className=\"rb-text\"\r\n                />\r\n            </h1>\r\n\r\n            <div className=\"rb-gst-container\">\r\n                <p>Gross Total - Rs. {total}</p>\r\n                <p>GST - {grandTotal >= 1000 ? \"5%\" : \"0%\"}</p>\r\n                <p>Discount - 0%</p>\r\n            </div>\r\n\r\n            <div className=\"rb-payment-change-container\">\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"payment\"\r\n                    id=\"payment\"\r\n                    placeholder=\"Add Payment\"\r\n                    className=\"rb-payment-input\"\r\n                    onChange={handlePaymentInput}\r\n                    value={payment}\r\n                />\r\n                <AnimatePresence>\r\n                    {change >= 0 ? (pre = \"Change - Rs.\") : (pre = \"Add Rs.\")}\r\n                    {change >= 0 ? (\r\n                        <motion.span\r\n                            initial={{ translateY: 25, opacity: 0 }}\r\n                            animate={{ translateY: 0, opacity: 1 }}\r\n                            exit={{ translateY: 25, opacity: 0 }}\r\n                            transition={{ duration: 0.25 }}\r\n                            className=\"rb-change-text\"\r\n                        >\r\n                            <TextTransition\r\n                                text={`${pre} ${change}`}\r\n                                springConfig={presets.wobbly}\r\n                            />\r\n                        </motion.span>\r\n                    ) : (\r\n                        <motion.span\r\n                            initial={{ translateY: 25, opacity: 0 }}\r\n                            animate={{ translateY: 0, opacity: 1 }}\r\n                            transition={{ duration: 0.25 }}\r\n                            exit={{ translateY: 25, opacity: 0 }}\r\n                            className=\"rb-change-text\"\r\n                        >\r\n                            <TextTransition\r\n                                text={`${pre} ${Math.abs(change)}`}\r\n                                springConfig={presets.wobbly}\r\n                            />\r\n                        </motion.span>\r\n                    )}\r\n                </AnimatePresence>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ReceiptBar;\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport MainTable from \"../components/MainTable\";\r\nimport ReceiptBar from \"../components/ReceiptBar\";\r\nimport { motion } from \"framer-motion\";\r\nimport { ItemContext } from \"../contexts/ItemsContext\";\r\nimport Nav from \"../components/Nav\";\r\n\r\nfunction Workspace() {\r\n    const [items, setItems] = useContext(ItemContext);\r\n\r\n    const [total, setTotal] = useState(0);\r\n    const [grandTotal, setGrandTotal] = useState(0);\r\n    const [currentItems, setCurrentItems] = useState([]);\r\n\r\n    useEffect(() => {\r\n        document.title = \"Workspace | Postsys\";\r\n    }, []);\r\n\r\n    const onClickClear = () => {\r\n        setCurrentItems([]);\r\n        setGrandTotal(0);\r\n        setTotal(0);\r\n    };\r\n\r\n    const workspaceNav = (\r\n        <Nav\r\n            mode=\"link\"\r\n            left={[\"PostSys\"]}\r\n            center={[\r\n                {\r\n                    type: \"link\",\r\n                    name: \"Projects\",\r\n                    url: \"/\",\r\n                    cont: \"\",\r\n                },\r\n                {\r\n                    type: \"link\",\r\n                    name: \"Edit\",\r\n                    url: \"/\",\r\n                    cont: \"\",\r\n                },\r\n                {\r\n                    type: \"link\",\r\n                    name: \"Clear\",\r\n                    url: \"/\",\r\n                    cont: \"\",\r\n                },\r\n            ]}\r\n            onClickClear={onClickClear}\r\n            right={[\"\"]}\r\n            img={[\"\"]}\r\n        />\r\n    );\r\n\r\n    const onTotalChange = (t) => {\r\n        // only round to the nearest digit if total over 100\r\n        if (t >= 100) {\r\n            setTotal(Math.round(t));\r\n        } else {\r\n            setTotal(parseFloat(t.toFixed(2)));\r\n        }\r\n\r\n        // applying gst only when total cost above 5000\r\n        if (total >= 1000) {\r\n            setGrandTotal(parseFloat((total * 1.05).toFixed(2)));\r\n        } else {\r\n            setGrandTotal(total);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {workspaceNav}\r\n            <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }}>\r\n                <MainTable\r\n                    items={items}\r\n                    setItems={setItems}\r\n                    onTotalChange={onTotalChange}\r\n                    currentItems={currentItems}\r\n                />\r\n                <ReceiptBar total={total} grandTotal={grandTotal} />\r\n            </motion.div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Workspace;\r\n"],"sourceRoot":""}